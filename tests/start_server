#!/usr/bin/env sh

# Copyright 2018 Banco Bilbao Vizcaya Argentaria, S.A.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

echo "export CLUSTER_SIZE=N [2|4] env variable to execute the benchmark in replica mode. N number of folowers"
echo "export PROFILING=true env variable to enable go profiling. Default profiling rate is 30. Output: results/cpu|mem.pb.gz"
echo "export PROFILING_RATE=30 (in seconds) env variable to set the default profiling delay"

echo Create id_ed25519 key
ssh-keygen -t ed25519 -N '' -f /var/tmp/id_ed25519

function profiler_cmd {
    ELAPSED=0
    while curl -s -X POST http://localhost:8080/health-check 2>&1 > /dev/null ; do
        (BALLOON_VERSION=$(curl -s http://localhost:6060/debug/vars | awk -F '"version": ' '/balloon_stats/ {print $2}' | tr -d '},')
        # Avoid empty version beacause preload process is not already started... 
        : ${BALLOON_VERSION:=0}
        go tool pprof -proto -sample_index=alloc_objects -output results/$(date +%s)-${BALLOON_VERSION}-mem-alloc-objects.pb.gz http://localhost:6060/debug/pprof/heap
        go tool pprof -proto -sample_index=alloc_space -output results/$(date +%s)-${BALLOON_VERSION}-mem-alloc-space-top.pb.gz http://localhost:6060/debug/pprof/heap
        go tool pprof -proto -sample_index=inuse_objects -output results/$(date +%s)-${BALLOON_VERSION}-mem-inuse-objects.pb.gz http://localhost:6060/debug/pprof/heap
        go tool pprof -proto -sample_index=inuse_space -output results/$(date +%s)-${BALLOON_VERSION}-mem-inuse-space-top.pb.gz http://localhost:6060/debug/pprof/heap
        go tool pprof -proto -seconds 30 -output results/$(date +%s)-${BALLOON_VERSION}-cpu-profile.pb.gz http://localhost:6060) 2>&1 > /dev/null
        sleep $PROFILING_RATE
    done
}

if [ ! -z "$PROFILING" ]
then
    echo "PROFILING=enabled"
    : ${PROFILING_RATE:=30}
    mkdir -p results
    PROFILING=--profiling
    echo "PROFILING_RATE=${PROFILING_RATE}s"
    PROFILER_CMD="profiler_cmd"
else
    echo PROFILING=disabled
    PROFILER_CMD="true"
fi

if [ -z "$CLUSTER_SIZE" ]
then
    echo Starting single server...
    go run ../main.go start -k pepe -p $(mktemp -d /var/tmp/demo.XXX) --raftpath $(mktemp -d /var/tmp/demo.XXX) -y /var/tmp/id_ed25519 -l error --http-addr :8080 --raft-addr :9000 --mgmt-addr :8090 $PROFILING &
    sleep 10
    $PROFILER_CMD &
    echo done.
else
    echo Starting cluster mode...
    go run ../main.go start -k pepe -p $(mktemp -d /var/tmp/demo.XXX) --raftpath $(mktemp -d /var/tmp/demo.XXX) -y /var/tmp/id_ed25519 -l error --http-addr :8080 --raft-addr :9000 --mgmt-addr :8090 $PROFILING &
    sleep 10
    echo Starting followers
    for i in $(seq 1 $CLUSTER_SIZE); do
        go run ../main.go start -k pepe -p $(mktemp -d /var/tmp/demo.XXX) --raftpath $(mktemp -d /var/tmp/demo.XXX) -y /var/tmp/id_ed25519 -l error --http-addr :808$i --join-addr :8090 --raft-addr :900$i --mgmt-addr :809$i --node-id node$i &
    done
    sleep 10
    $PROFILER_CMD &
    echo done.
fi
